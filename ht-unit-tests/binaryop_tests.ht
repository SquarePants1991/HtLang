# 简单运算
assert("1 + 2 需要等于3", 1 + 2 == 3);
assert("1 - 2 需要等于-1", 1 - 2 == -1);
assert("2 * 4 需要等于8", 2 * 4 == 8);
assert("3 / 2.0 需要等于1.5", 3/2.0 == 1.5);
assert("3 / 2 需要等于1", 3/2 == 1);
assert("Hello + 2 需要等于Hello2", "Hello" + 2 == "Hello2");
assert("3 ** 2 需要等于9", 3 ** 2 == 9);
assert("2 ** 2 ** 3 需要等于256", 2 ** 2 ** 3 == 256);
assert("10 % 2 需要等于0", 10 % 2 == 0);
assert("10 % 3 需要等于1", 10 % 3 == 1);

# 复合运算
assert("1 + 2 * 3 需要等于7", 1 + 2 * 3 == 7);
assert("(1 + 2) * 3 需要等于9", (1 + 2) * 3 == 9);
assert("1 + 2 ** 3 需要等于9", 1 + 2 ** 3 == 9);
assert("(1 + 2) ** 3 需要等于27", (1 + 2) ** 3 == 27);

# 比较运算
assert("(1 != 1) 需要等于false", (1 != 1) == false);
assert("(1 != 2) 需要等于true", (1 != 2) == true);
assert("(hello != world) 需要等于true", ("hello" != "world") == true);
assert("(hello != hello) 需要等于false", ("hello" != "hello") == false);
assert("(1 == 1) 需要等于true", (1 == 1) == true);
assert("(1 > 1) 需要等于false", (1 > 1) == false);
assert("(1 >= 1) 需要等于true", (1 >= 1) == true);
assert("(1 < 1) 需要等于false", (1 < 1) == false);
assert("(1 <= 2) 需要等于true", (1 <= 2) == true);

# 逻辑运算
assert("(true && false) 需要等于false", (true && false) == false);
assert("(true && true) 需要等于true", (true && true) == true);
assert("(false || false) 需要等于false", (false || false) == false);
assert("(false || true) 需要等于true", (false || true) == true);
